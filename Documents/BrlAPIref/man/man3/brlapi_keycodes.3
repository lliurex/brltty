.TH "brlapi_keycodes" 3 "Fri Feb 22 2019" "Version 0.7" "BrlAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
brlapi_keycodes
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBRLAPI_PRIxKEYCODE\fP   PRIx64"
.br
.ti -1c
.RI "#define \fBBRLAPI_PRIuKEYCODE\fP   PRIu64"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_MAX\fP   UINT64_C(0XFFFFFFFFFFFFFFFF)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLAGS_MASK\fP   UINT64_C(0XFFFFFFFF00000000)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLAGS_SHIFT\fP   32"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG\fP(v)   ((\fBbrlapi_keyCode_t\fP)(v) << \fBBRLAPI_KEY_FLAGS_SHIFT\fP)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOD1\fP   \fBBRLAPI_KEY_FLG\fP(0x00000008)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOD2\fP   \fBBRLAPI_KEY_FLG\fP(0x00000010)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOD3\fP   \fBBRLAPI_KEY_FLG\fP(0x00000020)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOD4\fP   \fBBRLAPI_KEY_FLG\fP(0x00000040)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOD5\fP   \fBBRLAPI_KEY_FLG\fP(0x00000080)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_TYPE_MASK\fP   UINT64_C(0X00000000E0000000)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_TYPE_SHIFT\fP   29"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_TYPE_CMD\fP   UINT64_C(0X0000000020000000)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_TYPE_SYM\fP   UINT64_C(0X0000000000000000)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CODE_MASK\fP   UINT64_C(0X000000001FFFFFFF)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CODE_SHIFT\fP   0"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BLK_MASK\fP   UINT64_C(0X1FFF0000)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BLK_SHIFT\fP   16"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ARG_MASK\fP   UINT64_C(0X0000FFFF)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ARG_SHIFT\fP   0"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD\fP(v)   ((v) << \fBBRLAPI_KEY_CMD_BLK_SHIFT\fP)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_BACKSPACE\fP   UINT64_C(0X0000FF08)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_TAB\fP   UINT64_C(0X0000FF09)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_LINEFEED\fP   UINT64_C(0X0000FF0D)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_ESCAPE\fP   UINT64_C(0X0000FF1B)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_HOME\fP   UINT64_C(0X0000FF50)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_LEFT\fP   UINT64_C(0X0000FF51)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_UP\fP   UINT64_C(0X0000FF52)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_RIGHT\fP   UINT64_C(0X0000FF53)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_DOWN\fP   UINT64_C(0X0000FF54)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_PAGE_UP\fP   UINT64_C(0X0000FF55)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_PAGE_DOWN\fP   UINT64_C(0X0000FF56)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_END\fP   UINT64_C(0X0000FF57)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_INSERT\fP   UINT64_C(0X0000FF63)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_FUNCTION\fP   UINT64_C(0X0000FFBE)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_DELETE\fP   UINT64_C(0X0000FFFF)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_SYM_UNICODE\fP   UINT64_C(0X01000000)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint64_t \fBbrlapi_keyCode_t\fP"
.br
.in -1c
.in +1c
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NOOP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 0)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_LNUP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 1)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_LNDN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 2)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_WINUP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 3)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_WINDN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 4)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRDIFLN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 5)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXDIFLN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 6)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ATTRUP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 7)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ATTRDN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 8)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_TOP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 9)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BOT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 10)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_TOP_LEFT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 11)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BOT_LEFT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 12)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRPGRPH\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 13)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXPGRPH\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 14)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRPROMPT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 15)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXPROMPT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 16)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRSEARCH\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 17)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXSEARCH\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 18)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CHRLT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 19)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CHRRT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 20)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_HWINLT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 21)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_HWINRT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 22)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_FWINLT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 23)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_FWINRT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 24)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_FWINLTSKIP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 25)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_FWINRTSKIP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 26)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_LNBEG\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 27)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_LNEND\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 28)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_HOME\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 29)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BACK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 30)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_RETURN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 31)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_FREEZE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 32)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_DISPMD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 33)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SIXDOTS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 34)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SLIDEWIN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 35)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SKPIDLNS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 36)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SKPBLNKWINS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 37)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CSRVIS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 38)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CSRHIDE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 39)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CSRTRK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 40)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CSRSIZE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 41)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CSRBLINK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 42)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ATTRVIS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 43)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ATTRBLINK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 44)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CAPBLINK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 45)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_TUNES\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 46)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_AUTOREPEAT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 47)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_AUTOSPEAK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 48)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_HELP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 49)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_INFO\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 50)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_LEARN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 51)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PREFMENU\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 52)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PREFSAVE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 53)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PREFLOAD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 54)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_FIRST_ITEM\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 55)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_LAST_ITEM\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 56)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_PREV_ITEM\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 57)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_NEXT_ITEM\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 58)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_PREV_SETTING\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 59)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_NEXT_SETTING\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 60)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MUTE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 61)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPKHOME\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 62)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 63)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_ABOVE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 64)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_BELOW\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 65)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_SLOWER\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 66)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_FASTER\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 67)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_SOFTER\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 68)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SAY_LOUDER\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 69)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SWITCHVT_PREV\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 70)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SWITCHVT_NEXT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 71)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CSRJMP_VERT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 72)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PASTE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 73)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_RESTARTBRL\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 74)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_RESTARTSPEECH\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 75)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_OFFLINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 76)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SHIFT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 77)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_UPPER\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 78)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CONTROL\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 79)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_META\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 80)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_TIME\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 81)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_MENU_PREV_LEVEL\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 82)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_SEL_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 83)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_SEL_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 84)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_INS_CHARS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 85)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_DEL_CHARS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 86)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_REP_CHARS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 87)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_CMP_WORDS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 88)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_CURR_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 89)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_PREV_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 90)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_NEXT_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 91)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_CURR_WORD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 92)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_PREV_WORD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 93)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_NEXT_WORD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 94)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_CURR_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 95)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_PREV_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 96)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_NEXT_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 97)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_FRST_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 98)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_LAST_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 99)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_FRST_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 100)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_LAST_LINE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 101)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_DESC_CURR_CHAR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 102)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPELL_CURR_WORD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 103)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ROUTE_CURR_LOCN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 104)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_CURR_LOCN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 105)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SHOW_CURR_LOCN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 106)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CLIP_SAVE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 107)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CLIP_RESTORE\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 108)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BRLUCDOTS\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 109)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BRLKBD\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 110)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_UNSTICK\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 111)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ALTGR\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 112)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_GUI\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 113)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BRL_STOP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 114)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_BRL_START\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 115)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPK_STOP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 116)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPK_START\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 117)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SCR_STOP\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 118)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SCR_START\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 119)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SELECTVT_PREV\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 120)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SELECTVT_NEXT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 121)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRNBWIN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 122)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXNBWIN\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 123)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_TOUCH_NAV\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 124)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SPEAK_INDENT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 125)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ASPK_INDENT\fP   (\fBBRLAPI_KEY_CMD\fP(0) + 126)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ROUTE\fP   \fBBRLAPI_KEY_CMD\fP(1)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CLIP_NEW\fP   \fBBRLAPI_KEY_CMD\fP(2)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CUTBEGIN\fP   \fBBRLAPI_KEY_CMD\fP(2)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CLIP_ADD\fP   \fBBRLAPI_KEY_CMD\fP(3)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CUTAPPEND\fP   \fBBRLAPI_KEY_CMD\fP(3)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_COPY_RECT\fP   \fBBRLAPI_KEY_CMD\fP(4)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CUTRECT\fP   \fBBRLAPI_KEY_CMD\fP(4)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_COPY_LINE\fP   \fBBRLAPI_KEY_CMD\fP(5)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CUTLINE\fP   \fBBRLAPI_KEY_CMD\fP(5)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SWITCHVT\fP   \fBBRLAPI_KEY_CMD\fP(6)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRINDENT\fP   \fBBRLAPI_KEY_CMD\fP(7)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXINDENT\fP   \fBBRLAPI_KEY_CMD\fP(8)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_DESCCHAR\fP   \fBBRLAPI_KEY_CMD\fP(9)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SETLEFT\fP   \fBBRLAPI_KEY_CMD\fP(10)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SETMARK\fP   \fBBRLAPI_KEY_CMD\fP(11)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_GOTOMARK\fP   \fBBRLAPI_KEY_CMD\fP(12)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_GOTOLINE\fP   \fBBRLAPI_KEY_CMD\fP(13)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PRDIFCHAR\fP   \fBBRLAPI_KEY_CMD\fP(14)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_NXDIFCHAR\fP   \fBBRLAPI_KEY_CMD\fP(15)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CLIP_COPY\fP   \fBBRLAPI_KEY_CMD\fP(16)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_COPYCHARS\fP   \fBBRLAPI_KEY_CMD\fP(16)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CLIP_APPEND\fP   \fBBRLAPI_KEY_CMD\fP(17)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_APNDCHARS\fP   \fBBRLAPI_KEY_CMD\fP(17)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PASTE_HISTORY\fP   \fBBRLAPI_KEY_CMD\fP(18)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SET_TEXT_TABLE\fP   \fBBRLAPI_KEY_CMD\fP(19)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SET_ATTRIBUTES_TABLE\fP   \fBBRLAPI_KEY_CMD\fP(20)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SET_CONTRACTION_TABLE\fP   \fBBRLAPI_KEY_CMD\fP(21)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SET_KEYBOARD_TABLE\fP   \fBBRLAPI_KEY_CMD\fP(22)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SET_LANGUAGE_PROFILE\fP   \fBBRLAPI_KEY_CMD\fP(23)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_SELECTVT\fP   \fBBRLAPI_KEY_CMD\fP(30)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_ALERT\fP   \fBBRLAPI_KEY_CMD\fP(31)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PASSDOTS\fP   \fBBRLAPI_KEY_CMD\fP(34)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PASSAT\fP   \fBBRLAPI_KEY_CMD\fP(35)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PASSXT\fP   \fBBRLAPI_KEY_CMD\fP(36)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_PASSPS2\fP   \fBBRLAPI_KEY_CMD\fP(37)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_CONTEXT\fP   \fBBRLAPI_KEY_CMD\fP(38)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_CMD_TOUCH_AT\fP   \fBBRLAPI_KEY_CMD\fP(39)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_TOGGLE_ON\fP   \fBBRLAPI_KEY_FLG\fP(0X0100)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_TOGGLE_OFF\fP   \fBBRLAPI_KEY_FLG\fP(0X0200)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_TOGGLE_MASK\fP   (\fBBRLAPI_KEY_FLG_TOGGLE_ON\fP | \fBBRLAPI_KEY_FLG_TOGGLE_OFF\fP)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOTION_ROUTE\fP   \fBBRLAPI_KEY_FLG\fP(0X0400)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOTION_SCALED\fP   \fBBRLAPI_KEY_FLG\fP(0X0800)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_MOTION_TOLEFT\fP   \fBBRLAPI_KEY_FLG\fP(0X1000)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_SHIFT\fP   \fBBRLAPI_KEY_FLG\fP(0X01)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_UPPER\fP   \fBBRLAPI_KEY_FLG\fP(0X02)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_CONTROL\fP   \fBBRLAPI_KEY_FLG\fP(0X04)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_META\fP   \fBBRLAPI_KEY_FLG\fP(0X08)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_ALTGR\fP   \fBBRLAPI_KEY_FLG\fP(0X10)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_GUI\fP   \fBBRLAPI_KEY_FLG\fP(0X20)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_KBD_RELEASE\fP   \fBBRLAPI_KEY_FLG\fP(0X0100)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_KBD_EMUL0\fP   \fBBRLAPI_KEY_FLG\fP(0X0200)"
.br
.ti -1c
.RI "#define \fBBRLAPI_KEY_FLG_KBD_EMUL1\fP   \fBBRLAPI_KEY_FLG\fP(0X0400)"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT1\fP   1"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT2\fP   2"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT3\fP   4"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT4\fP   8"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT5\fP   16"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT6\fP   32"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT7\fP   64"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT8\fP   128"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOTC\fP   256"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOTS\fP(dot1,  dot2,  dot3,  dot4,  dot5,  dot6,  dot7,  dot8)"
.br
.ti -1c
.RI "#define \fBBRLAPI_DOT_CHORD\fP   256"
.br
.in -1c
.SH "Detailed Description"
.PP 
Key codes are unsigned 64 bit integers\&. This 64-bit space is split into 3 parts:
.PP
.IP "\(bu" 2
bits 63-32 (BRLAPI_KEY_FLAGS_MASK), flags: bits 39-32 are standard X modifiers (shift, control, meta, \&.\&.\&.)\&. Other flags are used for some commands, see documentation of BRLAPI_KEY_FLG_* for their respective uses\&.
.IP "\(bu" 2
bits 31-29 (BRLAPI_KEY_TYPE_MASK), key type: either BRLAPI_KEY_TYPE_CMD for braille commands, or BRLAPI_KEY_TYPE_SYM for standard X keysyms\&.
.IP "\(bu" 2
bits 28-0 (BRLAPI_KEY_CODE_MASK), key code: for braille commands, see BRLAPI_KEY_CMD_* ; for standard X keysyms, this is the keysym value, see X11 documentation, a complete list is probably available on your system in /usr/include/X11/keysymdef\&.h
.PP
.PP
The third part is itself split into two parts: a command number and a command value\&. The relative sizes of these parts vary according to the key type\&.
.PP
For a braille command, bits 28-16 (BRLAPI_KEY_CMD_BLK_MASK) hold the braille command number, while bits 15-0 (BRLAPI_KEY_CMD_ARG_MASK) hold the command value\&.
.PP
For a X keysym, if it is a unicode keysym (0x1uvwxyz), then the command number part is 0x1000000 and the value part is 0xuvwxyz\&. Else, the command part is held by bits 28-8 and the value part is held by bits 7-0\&. This permits to easily handle usual cases like 0x00xy (latin1), 0x01xy (latin2), XK_Backspace (0xff08, backspace), XK_Tab (0xff09, tab), \&.\&.\&.
.PP
For instance, if key == 0x0000000020010008,
.IP "\(bu" 2
(key & BRLAPI_KEY_TYPE_MASK) == BRLAPI_KEY_TYPE_CMD, so it's a braille command
.IP "\(bu" 2
(key & BRLAPI_KEY_CMD_BLK_MASK) == BRLAPI_KEY_CMD_ROUTE, so it's the braille route command\&.
.IP "\(bu" 2
(key & BRLAPI_KEY_CMD_ARG_MASK) == 8, so the highlighted cell is the 9th one (cells are numbered from 0)
.IP "\(bu" 2
(key & BRLAPI_KEY_FLAGS_MASK) == 0, so no modifier key was pressed during the command, and no particular flag applies to the command\&.
.PP
.PP
if key == 0x000000010000FF09,
.IP "\(bu" 2
(key & BRLAPI_KEY_TYPE_MASK) == BRLAPI_KEY_TYPE_SYM, so it's a keysym
.IP "\(bu" 2
(key & BRLAPI_KEY_CODE_MASK) == XK_Tab, so it's the tab key\&. BRLAPI_KEY_SYM_TAB can also be used here, as well as a few other BRLAPI_KEY_SYM_* constants which are provided to avoid having to include X11/keysymdef\&.h
.IP "\(bu" 2
(key & BRLAPI_KEY_FLAGS_MASK) == BRLAPI_KEY_FLG_SHIFT, so the shift modifier was pressed during the command\&.
.PP
.PP
in the X11 standard some keysyms are directly unicode, for instance if key == 0x0000000001001EA0,
.IP "\(bu" 2
(key & BRLAPI_KEY_TYPE_MASK) == BRLAPI_KEY_TYPE_SYM, so it's a keysym
.IP "\(bu" 2
(key & BRLAPI_KEY_SYM_UNICODE) != 0 so it's a unicode keysym, whose value is key & (BRLAPI_KEY_SYM_UNICODE-1)\&. Of course, one can also consider (key & BRLAPI_KEY_CODE_MASK) == XK_Abelowdot
.IP "\(bu" 2
(key & BRLAPI_KEY_FLAGS_MASK) == 0, so no modifier key was pressed during the command, and no particular flag applies to the command\&.
.PP
.PP
The \fBbrlapi_expandKeyCode()\fP function may be used for splitting key codes into these parts\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define BRLAPI_DOT1   1"
upper-left dot of standard braille cell 
.SS "#define BRLAPI_DOT2   2"
middle-left dot of standard braille cell 
.SS "#define BRLAPI_DOT3   4"
lower-left dot of standard braille cell 
.SS "#define BRLAPI_DOT4   8"
upper-right dot of standard braille cell 
.SS "#define BRLAPI_DOT5   16"
middle-right dot of standard braille cell 
.SS "#define BRLAPI_DOT6   32"
lower-right dot of standard braille cell 
.SS "#define BRLAPI_DOT7   64"
lower-left dot of computer braille cell 
.SS "#define BRLAPI_DOT8   128"
lower-right dot of computer braille cell 
.SS "#define BRLAPI_DOT_CHORD   256"
space key 
.SS "#define BRLAPI_DOTC   256"
chord (space bar on braille keyboard) 
.SS "#define BRLAPI_DOTS(dot1, dot2, dot3, dot4, dot5, dot6, dot7, dot8)"
\fBValue:\fP
.PP
.nf
(\
  ((dot1)? BRLAPI_DOT1: 0) | \
  ((dot2)? BRLAPI_DOT2: 0) | \
  ((dot3)? BRLAPI_DOT3: 0) | \
  ((dot4)? BRLAPI_DOT4: 0) | \
  ((dot5)? BRLAPI_DOT5: 0) | \
  ((dot6)? BRLAPI_DOT6: 0) | \
  ((dot7)? BRLAPI_DOT7: 0) | \
  ((dot8)? BRLAPI_DOT8: 0) \
)
.fi
Helper macro to easily produce braille patterns 
.SS "#define BRLAPI_KEY_CMD(v)   ((v) << \fBBRLAPI_KEY_CMD_BLK_SHIFT\fP)"

.SS "#define BRLAPI_KEY_CMD_ALERT   \fBBRLAPI_KEY_CMD\fP(31)"
render an alert 
.SS "#define BRLAPI_KEY_CMD_ALTGR   (\fBBRLAPI_KEY_CMD\fP(0) + 112)"
cycle the AltGr (Right Alt) sticky input modifier (next, on, off) 
.SS "#define BRLAPI_KEY_CMD_APNDCHARS   \fBBRLAPI_KEY_CMD\fP(17)"
deprecated definition of CLIP_APPEND - append characters to clipboard 
.SS "#define BRLAPI_KEY_CMD_ARG_MASK   UINT64_C(0X0000FFFF)"
Mask for braille command value 
.SS "#define BRLAPI_KEY_CMD_ARG_SHIFT   0"
Shift for braille command value 
.SS "#define BRLAPI_KEY_CMD_ASPK_CMP_WORDS   (\fBBRLAPI_KEY_CMD\fP(0) + 88)"
set autospeak completed words on/off 
.SS "#define BRLAPI_KEY_CMD_ASPK_DEL_CHARS   (\fBBRLAPI_KEY_CMD\fP(0) + 86)"
set autospeak deleted characters on/off 
.SS "#define BRLAPI_KEY_CMD_ASPK_INDENT   (\fBBRLAPI_KEY_CMD\fP(0) + 126)"
set autospeak indent of current line on/off 
.SS "#define BRLAPI_KEY_CMD_ASPK_INS_CHARS   (\fBBRLAPI_KEY_CMD\fP(0) + 85)"
set autospeak inserted characters on/off 
.SS "#define BRLAPI_KEY_CMD_ASPK_REP_CHARS   (\fBBRLAPI_KEY_CMD\fP(0) + 87)"
set autospeak replaced characters on/off 
.SS "#define BRLAPI_KEY_CMD_ASPK_SEL_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 84)"
set autospeak selected character on/off 
.SS "#define BRLAPI_KEY_CMD_ASPK_SEL_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 83)"
set autospeak selected line on/off 
.SS "#define BRLAPI_KEY_CMD_ATTRBLINK   (\fBBRLAPI_KEY_CMD\fP(0) + 44)"
set attribute blinking on/off 
.SS "#define BRLAPI_KEY_CMD_ATTRDN   (\fBBRLAPI_KEY_CMD\fP(0) + 8)"
go down to nearest line with different highlighting 
.SS "#define BRLAPI_KEY_CMD_ATTRUP   (\fBBRLAPI_KEY_CMD\fP(0) + 7)"
go up to nearest line with different highlighting 
.SS "#define BRLAPI_KEY_CMD_ATTRVIS   (\fBBRLAPI_KEY_CMD\fP(0) + 43)"
set attribute underlining on/off 
.SS "#define BRLAPI_KEY_CMD_AUTOREPEAT   (\fBBRLAPI_KEY_CMD\fP(0) + 47)"
set autorepeat on/off 
.SS "#define BRLAPI_KEY_CMD_AUTOSPEAK   (\fBBRLAPI_KEY_CMD\fP(0) + 48)"
set autospeak on/off 
.SS "#define BRLAPI_KEY_CMD_BACK   (\fBBRLAPI_KEY_CMD\fP(0) + 30)"
go back after cursor tracking 
.SS "#define BRLAPI_KEY_CMD_BLK_MASK   UINT64_C(0X1FFF0000)"
Mask for braille command type 
.SS "#define BRLAPI_KEY_CMD_BLK_SHIFT   16"
Shift for braille command type 
.SS "#define BRLAPI_KEY_CMD_BOT   (\fBBRLAPI_KEY_CMD\fP(0) + 10)"
go to bottom line 
.SS "#define BRLAPI_KEY_CMD_BOT_LEFT   (\fBBRLAPI_KEY_CMD\fP(0) + 12)"
go to beginning of bottom line 
.SS "#define BRLAPI_KEY_CMD_BRL_START   (\fBBRLAPI_KEY_CMD\fP(0) + 115)"
start the braille driver 
.SS "#define BRLAPI_KEY_CMD_BRL_STOP   (\fBBRLAPI_KEY_CMD\fP(0) + 114)"
stop the braille driver 
.SS "#define BRLAPI_KEY_CMD_BRLKBD   (\fBBRLAPI_KEY_CMD\fP(0) + 110)"
set braille keyboard enabled/disabled 
.SS "#define BRLAPI_KEY_CMD_BRLUCDOTS   (\fBBRLAPI_KEY_CMD\fP(0) + 109)"
set braille input mode dots/text 
.SS "#define BRLAPI_KEY_CMD_CAPBLINK   (\fBBRLAPI_KEY_CMD\fP(0) + 45)"
set capital letter blinking on/off 
.SS "#define BRLAPI_KEY_CMD_CHRLT   (\fBBRLAPI_KEY_CMD\fP(0) + 19)"
go left one character 
.SS "#define BRLAPI_KEY_CMD_CHRRT   (\fBBRLAPI_KEY_CMD\fP(0) + 20)"
go right one character 
.SS "#define BRLAPI_KEY_CMD_CLIP_ADD   \fBBRLAPI_KEY_CMD\fP(3)"
append to clipboard from character 
.SS "#define BRLAPI_KEY_CMD_CLIP_APPEND   \fBBRLAPI_KEY_CMD\fP(17)"
append characters to clipboard 
.SS "#define BRLAPI_KEY_CMD_CLIP_COPY   \fBBRLAPI_KEY_CMD\fP(16)"
copy characters to clipboard 
.SS "#define BRLAPI_KEY_CMD_CLIP_NEW   \fBBRLAPI_KEY_CMD\fP(2)"
start new clipboard at character 
.SS "#define BRLAPI_KEY_CMD_CLIP_RESTORE   (\fBBRLAPI_KEY_CMD\fP(0) + 108)"
restore clipboard from disk 
.SS "#define BRLAPI_KEY_CMD_CLIP_SAVE   (\fBBRLAPI_KEY_CMD\fP(0) + 107)"
save clipboard to disk 
.SS "#define BRLAPI_KEY_CMD_CONTEXT   \fBBRLAPI_KEY_CMD\fP(38)"
switch to command context 
.SS "#define BRLAPI_KEY_CMD_CONTROL   (\fBBRLAPI_KEY_CMD\fP(0) + 79)"
cycle the Control sticky input modifier (next, on, off) 
.SS "#define BRLAPI_KEY_CMD_COPY_LINE   \fBBRLAPI_KEY_CMD\fP(5)"
linear copy to character 
.SS "#define BRLAPI_KEY_CMD_COPY_RECT   \fBBRLAPI_KEY_CMD\fP(4)"
rectangular copy to character 
.SS "#define BRLAPI_KEY_CMD_COPYCHARS   \fBBRLAPI_KEY_CMD\fP(16)"
deprecated definition of CLIP_COPY - copy characters to clipboard 
.SS "#define BRLAPI_KEY_CMD_CSRBLINK   (\fBBRLAPI_KEY_CMD\fP(0) + 42)"
set screen cursor blinking on/off 
.SS "#define BRLAPI_KEY_CMD_CSRHIDE   (\fBBRLAPI_KEY_CMD\fP(0) + 39)"
set hidden screen cursor on/off 
.SS "#define BRLAPI_KEY_CMD_CSRJMP_VERT   (\fBBRLAPI_KEY_CMD\fP(0) + 72)"
bring screen cursor to current line 
.SS "#define BRLAPI_KEY_CMD_CSRSIZE   (\fBBRLAPI_KEY_CMD\fP(0) + 41)"
set screen cursor style block/underline 
.SS "#define BRLAPI_KEY_CMD_CSRTRK   (\fBBRLAPI_KEY_CMD\fP(0) + 40)"
set track screen cursor on/off 
.SS "#define BRLAPI_KEY_CMD_CSRVIS   (\fBBRLAPI_KEY_CMD\fP(0) + 38)"
set screen cursor visibility on/off 
.SS "#define BRLAPI_KEY_CMD_CUTAPPEND   \fBBRLAPI_KEY_CMD\fP(3)"
deprecated definition of CLIP_ADD - append to clipboard from character 
.SS "#define BRLAPI_KEY_CMD_CUTBEGIN   \fBBRLAPI_KEY_CMD\fP(2)"
deprecated definition of CLIP_NEW - start new clipboard at character 
.SS "#define BRLAPI_KEY_CMD_CUTLINE   \fBBRLAPI_KEY_CMD\fP(5)"
deprecated definition of COPY_LINE - linear copy to character 
.SS "#define BRLAPI_KEY_CMD_CUTRECT   \fBBRLAPI_KEY_CMD\fP(4)"
deprecated definition of COPY_RECT - rectangular copy to character 
.SS "#define BRLAPI_KEY_CMD_DESC_CURR_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 102)"
describe current character 
.SS "#define BRLAPI_KEY_CMD_DESCCHAR   \fBBRLAPI_KEY_CMD\fP(9)"
describe character 
.SS "#define BRLAPI_KEY_CMD_DISPMD   (\fBBRLAPI_KEY_CMD\fP(0) + 33)"
set display mode attributes/text 
.SS "#define BRLAPI_KEY_CMD_FREEZE   (\fBBRLAPI_KEY_CMD\fP(0) + 32)"
set screen image frozen/unfrozen 
.SS "#define BRLAPI_KEY_CMD_FWINLT   (\fBBRLAPI_KEY_CMD\fP(0) + 23)"
go backward one braille window 
.SS "#define BRLAPI_KEY_CMD_FWINLTSKIP   (\fBBRLAPI_KEY_CMD\fP(0) + 25)"
go backward skipping blank braille windows 
.SS "#define BRLAPI_KEY_CMD_FWINRT   (\fBBRLAPI_KEY_CMD\fP(0) + 24)"
go forward one braille window 
.SS "#define BRLAPI_KEY_CMD_FWINRTSKIP   (\fBBRLAPI_KEY_CMD\fP(0) + 26)"
go forward skipping blank braille windows 
.SS "#define BRLAPI_KEY_CMD_GOTOLINE   \fBBRLAPI_KEY_CMD\fP(13)"
go to selected line 
.SS "#define BRLAPI_KEY_CMD_GOTOMARK   \fBBRLAPI_KEY_CMD\fP(12)"
go to remembered braille window position 
.SS "#define BRLAPI_KEY_CMD_GUI   (\fBBRLAPI_KEY_CMD\fP(0) + 113)"
cycle the GUI (Windows) sticky input modifier (next, on, off) 
.SS "#define BRLAPI_KEY_CMD_HELP   (\fBBRLAPI_KEY_CMD\fP(0) + 49)"
enter/leave help display 
.SS "#define BRLAPI_KEY_CMD_HOME   (\fBBRLAPI_KEY_CMD\fP(0) + 29)"
go to screen cursor 
.SS "#define BRLAPI_KEY_CMD_HWINLT   (\fBBRLAPI_KEY_CMD\fP(0) + 21)"
go left half a braille window 
.SS "#define BRLAPI_KEY_CMD_HWINRT   (\fBBRLAPI_KEY_CMD\fP(0) + 22)"
go right half a braille window 
.SS "#define BRLAPI_KEY_CMD_INFO   (\fBBRLAPI_KEY_CMD\fP(0) + 50)"
enter/leave status display 
.SS "#define BRLAPI_KEY_CMD_LEARN   (\fBBRLAPI_KEY_CMD\fP(0) + 51)"
enter/leave command learn mode 
.SS "#define BRLAPI_KEY_CMD_LNBEG   (\fBBRLAPI_KEY_CMD\fP(0) + 27)"
go to beginning of line 
.SS "#define BRLAPI_KEY_CMD_LNDN   (\fBBRLAPI_KEY_CMD\fP(0) + 2)"
go down one line 
.SS "#define BRLAPI_KEY_CMD_LNEND   (\fBBRLAPI_KEY_CMD\fP(0) + 28)"
go to end of line 
.SS "#define BRLAPI_KEY_CMD_LNUP   (\fBBRLAPI_KEY_CMD\fP(0) + 1)"
go up one line 
.SS "#define BRLAPI_KEY_CMD_MENU_FIRST_ITEM   (\fBBRLAPI_KEY_CMD\fP(0) + 55)"
go up to first item 
.SS "#define BRLAPI_KEY_CMD_MENU_LAST_ITEM   (\fBBRLAPI_KEY_CMD\fP(0) + 56)"
go down to last item 
.SS "#define BRLAPI_KEY_CMD_MENU_NEXT_ITEM   (\fBBRLAPI_KEY_CMD\fP(0) + 58)"
go down to next item 
.SS "#define BRLAPI_KEY_CMD_MENU_NEXT_SETTING   (\fBBRLAPI_KEY_CMD\fP(0) + 60)"
select next choice 
.SS "#define BRLAPI_KEY_CMD_MENU_PREV_ITEM   (\fBBRLAPI_KEY_CMD\fP(0) + 57)"
go up to previous item 
.SS "#define BRLAPI_KEY_CMD_MENU_PREV_LEVEL   (\fBBRLAPI_KEY_CMD\fP(0) + 82)"
go to previous menu level 
.SS "#define BRLAPI_KEY_CMD_MENU_PREV_SETTING   (\fBBRLAPI_KEY_CMD\fP(0) + 59)"
select previous choice 
.SS "#define BRLAPI_KEY_CMD_META   (\fBBRLAPI_KEY_CMD\fP(0) + 80)"
cycle the Meta (Left Alt) sticky input modifier (next, on, off) 
.SS "#define BRLAPI_KEY_CMD_MUTE   (\fBBRLAPI_KEY_CMD\fP(0) + 61)"
stop speaking 
.SS "#define BRLAPI_KEY_CMD_NOOP   (\fBBRLAPI_KEY_CMD\fP(0) + 0)"
do nothing 
.SS "#define BRLAPI_KEY_CMD_NXDIFCHAR   \fBBRLAPI_KEY_CMD\fP(15)"
go down to nearest line with different character 
.SS "#define BRLAPI_KEY_CMD_NXDIFLN   (\fBBRLAPI_KEY_CMD\fP(0) + 6)"
go down to nearest line with different content 
.SS "#define BRLAPI_KEY_CMD_NXINDENT   \fBBRLAPI_KEY_CMD\fP(8)"
go down to nearest line with less indent than character 
.SS "#define BRLAPI_KEY_CMD_NXNBWIN   (\fBBRLAPI_KEY_CMD\fP(0) + 123)"
go forward to nearest non-blank braille window 
.SS "#define BRLAPI_KEY_CMD_NXPGRPH   (\fBBRLAPI_KEY_CMD\fP(0) + 14)"
go down to first line of next paragraph 
.SS "#define BRLAPI_KEY_CMD_NXPROMPT   (\fBBRLAPI_KEY_CMD\fP(0) + 16)"
go down to next command prompt 
.SS "#define BRLAPI_KEY_CMD_NXSEARCH   (\fBBRLAPI_KEY_CMD\fP(0) + 18)"
search forward for clipboard text 
.SS "#define BRLAPI_KEY_CMD_OFFLINE   (\fBBRLAPI_KEY_CMD\fP(0) + 76)"
braille display temporarily unavailable 
.SS "#define BRLAPI_KEY_CMD_PASSAT   \fBBRLAPI_KEY_CMD\fP(35)"
AT (set 2) keyboard scan code 
.SS "#define BRLAPI_KEY_CMD_PASSDOTS   \fBBRLAPI_KEY_CMD\fP(34)"
type braille dots 
.SS "#define BRLAPI_KEY_CMD_PASSPS2   \fBBRLAPI_KEY_CMD\fP(37)"
PS/2 (set 3) keyboard scan code 
.SS "#define BRLAPI_KEY_CMD_PASSXT   \fBBRLAPI_KEY_CMD\fP(36)"
XT (set 1) keyboard scan code 
.SS "#define BRLAPI_KEY_CMD_PASTE   (\fBBRLAPI_KEY_CMD\fP(0) + 73)"
insert clipboard text after screen cursor 
.SS "#define BRLAPI_KEY_CMD_PASTE_HISTORY   \fBBRLAPI_KEY_CMD\fP(18)"
insert clipboard history entry after screen cursor 
.SS "#define BRLAPI_KEY_CMD_PRDIFCHAR   \fBBRLAPI_KEY_CMD\fP(14)"
go up to nearest line with different character 
.SS "#define BRLAPI_KEY_CMD_PRDIFLN   (\fBBRLAPI_KEY_CMD\fP(0) + 5)"
go up to nearest line with different content 
.SS "#define BRLAPI_KEY_CMD_PREFLOAD   (\fBBRLAPI_KEY_CMD\fP(0) + 54)"
restore preferences from disk 
.SS "#define BRLAPI_KEY_CMD_PREFMENU   (\fBBRLAPI_KEY_CMD\fP(0) + 52)"
enter/leave preferences menu 
.SS "#define BRLAPI_KEY_CMD_PREFSAVE   (\fBBRLAPI_KEY_CMD\fP(0) + 53)"
save preferences to disk 
.SS "#define BRLAPI_KEY_CMD_PRINDENT   \fBBRLAPI_KEY_CMD\fP(7)"
go up to nearest line with less indent than character 
.SS "#define BRLAPI_KEY_CMD_PRNBWIN   (\fBBRLAPI_KEY_CMD\fP(0) + 122)"
go backward to nearest non-blank braille window 
.SS "#define BRLAPI_KEY_CMD_PRPGRPH   (\fBBRLAPI_KEY_CMD\fP(0) + 13)"
go up to first line of paragraph 
.SS "#define BRLAPI_KEY_CMD_PRPROMPT   (\fBBRLAPI_KEY_CMD\fP(0) + 15)"
go up to previous command prompt 
.SS "#define BRLAPI_KEY_CMD_PRSEARCH   (\fBBRLAPI_KEY_CMD\fP(0) + 17)"
search backward for clipboard text 
.SS "#define BRLAPI_KEY_CMD_RESTARTBRL   (\fBBRLAPI_KEY_CMD\fP(0) + 74)"
restart braille driver 
.SS "#define BRLAPI_KEY_CMD_RESTARTSPEECH   (\fBBRLAPI_KEY_CMD\fP(0) + 75)"
restart speech driver 
.SS "#define BRLAPI_KEY_CMD_RETURN   (\fBBRLAPI_KEY_CMD\fP(0) + 31)"
go to screen cursor or go back after cursor tracking 
.SS "#define BRLAPI_KEY_CMD_ROUTE   \fBBRLAPI_KEY_CMD\fP(1)"
bring screen cursor to character 
.SS "#define BRLAPI_KEY_CMD_ROUTE_CURR_LOCN   (\fBBRLAPI_KEY_CMD\fP(0) + 104)"
bring screen cursor to speech cursor 
.SS "#define BRLAPI_KEY_CMD_SAY_ABOVE   (\fBBRLAPI_KEY_CMD\fP(0) + 64)"
speak from top of screen through current line 
.SS "#define BRLAPI_KEY_CMD_SAY_BELOW   (\fBBRLAPI_KEY_CMD\fP(0) + 65)"
speak from current line through bottom of screen 
.SS "#define BRLAPI_KEY_CMD_SAY_FASTER   (\fBBRLAPI_KEY_CMD\fP(0) + 67)"
increase speaking rate 
.SS "#define BRLAPI_KEY_CMD_SAY_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 63)"
speak current line 
.SS "#define BRLAPI_KEY_CMD_SAY_LOUDER   (\fBBRLAPI_KEY_CMD\fP(0) + 69)"
increase speaking volume 
.SS "#define BRLAPI_KEY_CMD_SAY_SLOWER   (\fBBRLAPI_KEY_CMD\fP(0) + 66)"
decrease speaking rate 
.SS "#define BRLAPI_KEY_CMD_SAY_SOFTER   (\fBBRLAPI_KEY_CMD\fP(0) + 68)"
decrease speaking volume 
.SS "#define BRLAPI_KEY_CMD_SCR_START   (\fBBRLAPI_KEY_CMD\fP(0) + 119)"
start the screen driver 
.SS "#define BRLAPI_KEY_CMD_SCR_STOP   (\fBBRLAPI_KEY_CMD\fP(0) + 118)"
stop the screen driver 
.SS "#define BRLAPI_KEY_CMD_SELECTVT   \fBBRLAPI_KEY_CMD\fP(30)"
bind to specific virtual terminal 
.SS "#define BRLAPI_KEY_CMD_SELECTVT_NEXT   (\fBBRLAPI_KEY_CMD\fP(0) + 121)"
bind to the next virtual terminal 
.SS "#define BRLAPI_KEY_CMD_SELECTVT_PREV   (\fBBRLAPI_KEY_CMD\fP(0) + 120)"
bind to the previous virtual terminal 
.SS "#define BRLAPI_KEY_CMD_SET_ATTRIBUTES_TABLE   \fBBRLAPI_KEY_CMD\fP(20)"
set attributes table 
.SS "#define BRLAPI_KEY_CMD_SET_CONTRACTION_TABLE   \fBBRLAPI_KEY_CMD\fP(21)"
set contraction table 
.SS "#define BRLAPI_KEY_CMD_SET_KEYBOARD_TABLE   \fBBRLAPI_KEY_CMD\fP(22)"
set keyboard table 
.SS "#define BRLAPI_KEY_CMD_SET_LANGUAGE_PROFILE   \fBBRLAPI_KEY_CMD\fP(23)"
set language profile 
.SS "#define BRLAPI_KEY_CMD_SET_TEXT_TABLE   \fBBRLAPI_KEY_CMD\fP(19)"
set text table 
.SS "#define BRLAPI_KEY_CMD_SETLEFT   \fBBRLAPI_KEY_CMD\fP(10)"
place left end of braille window at character 
.SS "#define BRLAPI_KEY_CMD_SETMARK   \fBBRLAPI_KEY_CMD\fP(11)"
remember current braille window position 
.SS "#define BRLAPI_KEY_CMD_SHIFT   (\fBBRLAPI_KEY_CMD\fP(0) + 77)"
cycle the Shift sticky input modifier (next, on, off) 
.SS "#define BRLAPI_KEY_CMD_SHOW_CURR_LOCN   (\fBBRLAPI_KEY_CMD\fP(0) + 106)"
set speech cursor visibility on/off 
.SS "#define BRLAPI_KEY_CMD_SIXDOTS   (\fBBRLAPI_KEY_CMD\fP(0) + 34)"
set text style 6-dot/8-dot 
.SS "#define BRLAPI_KEY_CMD_SKPBLNKWINS   (\fBBRLAPI_KEY_CMD\fP(0) + 37)"
set skipping of blank braille windows on/off 
.SS "#define BRLAPI_KEY_CMD_SKPIDLNS   (\fBBRLAPI_KEY_CMD\fP(0) + 36)"
set skipping of lines with identical content on/off 
.SS "#define BRLAPI_KEY_CMD_SLIDEWIN   (\fBBRLAPI_KEY_CMD\fP(0) + 35)"
set sliding braille window on/off 
.SS "#define BRLAPI_KEY_CMD_SPEAK_CURR_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 89)"
speak current character 
.SS "#define BRLAPI_KEY_CMD_SPEAK_CURR_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 95)"
speak current line 
.SS "#define BRLAPI_KEY_CMD_SPEAK_CURR_LOCN   (\fBBRLAPI_KEY_CMD\fP(0) + 105)"
speak speech cursor location 
.SS "#define BRLAPI_KEY_CMD_SPEAK_CURR_WORD   (\fBBRLAPI_KEY_CMD\fP(0) + 92)"
speak current word 
.SS "#define BRLAPI_KEY_CMD_SPEAK_FRST_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 98)"
go to and speak first non-blank character on line 
.SS "#define BRLAPI_KEY_CMD_SPEAK_FRST_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 100)"
go to and speak first non-blank line on screen 
.SS "#define BRLAPI_KEY_CMD_SPEAK_INDENT   (\fBBRLAPI_KEY_CMD\fP(0) + 125)"
speak indent of current line 
.SS "#define BRLAPI_KEY_CMD_SPEAK_LAST_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 99)"
go to and speak last non-blank character on line 
.SS "#define BRLAPI_KEY_CMD_SPEAK_LAST_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 101)"
go to and speak last non-blank line on screen 
.SS "#define BRLAPI_KEY_CMD_SPEAK_NEXT_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 91)"
go to and speak next character 
.SS "#define BRLAPI_KEY_CMD_SPEAK_NEXT_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 97)"
go to and speak next line 
.SS "#define BRLAPI_KEY_CMD_SPEAK_NEXT_WORD   (\fBBRLAPI_KEY_CMD\fP(0) + 94)"
go to and speak next word 
.SS "#define BRLAPI_KEY_CMD_SPEAK_PREV_CHAR   (\fBBRLAPI_KEY_CMD\fP(0) + 90)"
go to and speak previous character 
.SS "#define BRLAPI_KEY_CMD_SPEAK_PREV_LINE   (\fBBRLAPI_KEY_CMD\fP(0) + 96)"
go to and speak previous line 
.SS "#define BRLAPI_KEY_CMD_SPEAK_PREV_WORD   (\fBBRLAPI_KEY_CMD\fP(0) + 93)"
go to and speak previous word 
.SS "#define BRLAPI_KEY_CMD_SPELL_CURR_WORD   (\fBBRLAPI_KEY_CMD\fP(0) + 103)"
spell current word 
.SS "#define BRLAPI_KEY_CMD_SPK_START   (\fBBRLAPI_KEY_CMD\fP(0) + 117)"
start the speech driver 
.SS "#define BRLAPI_KEY_CMD_SPK_STOP   (\fBBRLAPI_KEY_CMD\fP(0) + 116)"
stop the speech driver 
.SS "#define BRLAPI_KEY_CMD_SPKHOME   (\fBBRLAPI_KEY_CMD\fP(0) + 62)"
go to current speaking position 
.SS "#define BRLAPI_KEY_CMD_SWITCHVT   \fBBRLAPI_KEY_CMD\fP(6)"
switch to specific virtual terminal 
.SS "#define BRLAPI_KEY_CMD_SWITCHVT_NEXT   (\fBBRLAPI_KEY_CMD\fP(0) + 71)"
switch to the next virtual terminal 
.SS "#define BRLAPI_KEY_CMD_SWITCHVT_PREV   (\fBBRLAPI_KEY_CMD\fP(0) + 70)"
switch to the previous virtual terminal 
.SS "#define BRLAPI_KEY_CMD_TIME   (\fBBRLAPI_KEY_CMD\fP(0) + 81)"
show current date and time 
.SS "#define BRLAPI_KEY_CMD_TOP   (\fBBRLAPI_KEY_CMD\fP(0) + 9)"
go to top line 
.SS "#define BRLAPI_KEY_CMD_TOP_LEFT   (\fBBRLAPI_KEY_CMD\fP(0) + 11)"
go to beginning of top line 
.SS "#define BRLAPI_KEY_CMD_TOUCH_AT   \fBBRLAPI_KEY_CMD\fP(39)"
current reading location 
.SS "#define BRLAPI_KEY_CMD_TOUCH_NAV   (\fBBRLAPI_KEY_CMD\fP(0) + 124)"
set touch navigation on/off 
.SS "#define BRLAPI_KEY_CMD_TUNES   (\fBBRLAPI_KEY_CMD\fP(0) + 46)"
set alert tunes on/off 
.SS "#define BRLAPI_KEY_CMD_UNSTICK   (\fBBRLAPI_KEY_CMD\fP(0) + 111)"
clear all sticky input modifiers 
.SS "#define BRLAPI_KEY_CMD_UPPER   (\fBBRLAPI_KEY_CMD\fP(0) + 78)"
cycle the Upper sticky input modifier (next, on, off) 
.SS "#define BRLAPI_KEY_CMD_WINDN   (\fBBRLAPI_KEY_CMD\fP(0) + 4)"
go down several lines 
.SS "#define BRLAPI_KEY_CMD_WINUP   (\fBBRLAPI_KEY_CMD\fP(0) + 3)"
go up several lines 
.SS "#define BRLAPI_KEY_CODE_MASK   UINT64_C(0X000000001FFFFFFF)"
Mask for code of brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_CODE_SHIFT   0"
Shift for code of brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_FLAGS_MASK   UINT64_C(0XFFFFFFFF00000000)"
Mask for flags of brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_FLAGS_SHIFT   32"
Shift for flags of brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_FLG(v)   ((\fBbrlapi_keyCode_t\fP)(v) << \fBBRLAPI_KEY_FLAGS_SHIFT\fP)"

.SS "#define BRLAPI_KEY_FLG_ALTGR   \fBBRLAPI_KEY_FLG\fP(0X10)"
altgr (right alt) key pressed 
.SS "#define BRLAPI_KEY_FLG_CONTROL   \fBBRLAPI_KEY_FLG\fP(0X04)"
control key pressed 
.SS "#define BRLAPI_KEY_FLG_GUI   \fBBRLAPI_KEY_FLG\fP(0X20)"
gui (windows) key pressed 
.SS "#define BRLAPI_KEY_FLG_KBD_EMUL0   \fBBRLAPI_KEY_FLG\fP(0X0200)"
it is an emulation 0 scan code 
.SS "#define BRLAPI_KEY_FLG_KBD_EMUL1   \fBBRLAPI_KEY_FLG\fP(0X0400)"
it is an emulation 1 scan code 
.SS "#define BRLAPI_KEY_FLG_KBD_RELEASE   \fBBRLAPI_KEY_FLG\fP(0X0100)"
it is a release scan code 
.SS "#define BRLAPI_KEY_FLG_META   \fBBRLAPI_KEY_FLG\fP(0X08)"
meta (left alt) key pressed 
.SS "#define BRLAPI_KEY_FLG_MOD1   \fBBRLAPI_KEY_FLG\fP(0x00000008)"
Standard X modifiers Mod1 modifier (AKA meta) 
.SS "#define BRLAPI_KEY_FLG_MOD2   \fBBRLAPI_KEY_FLG\fP(0x00000010)"
Mod2 modifier (usually numlock) 
.SS "#define BRLAPI_KEY_FLG_MOD3   \fBBRLAPI_KEY_FLG\fP(0x00000020)"
Mod3 modifier 
.SS "#define BRLAPI_KEY_FLG_MOD4   \fBBRLAPI_KEY_FLG\fP(0x00000040)"
Mod4 modifier 
.SS "#define BRLAPI_KEY_FLG_MOD5   \fBBRLAPI_KEY_FLG\fP(0x00000080)"
Mod5 modifier (usually Alt-Gr) 
.SS "#define BRLAPI_KEY_FLG_MOTION_ROUTE   \fBBRLAPI_KEY_FLG\fP(0X0400)"
bring screen cursor into braille window after function 
.SS "#define BRLAPI_KEY_FLG_MOTION_SCALED   \fBBRLAPI_KEY_FLG\fP(0X0800)"
scale arg=0X00-0XFF to screen height 
.SS "#define BRLAPI_KEY_FLG_MOTION_TOLEFT   \fBBRLAPI_KEY_FLG\fP(0X1000)"
go to beginning of line 
.SS "#define BRLAPI_KEY_FLG_SHIFT   \fBBRLAPI_KEY_FLG\fP(0X01)"
shift key pressed 
.SS "#define BRLAPI_KEY_FLG_TOGGLE_MASK   (\fBBRLAPI_KEY_FLG_TOGGLE_ON\fP | \fBBRLAPI_KEY_FLG_TOGGLE_OFF\fP)"
mask for all toggle flags 
.SS "#define BRLAPI_KEY_FLG_TOGGLE_OFF   \fBBRLAPI_KEY_FLG\fP(0X0200)"
disable feature 
.SS "#define BRLAPI_KEY_FLG_TOGGLE_ON   \fBBRLAPI_KEY_FLG\fP(0X0100)"
enable feature 
.SS "#define BRLAPI_KEY_FLG_UPPER   \fBBRLAPI_KEY_FLG\fP(0X02)"
convert to uppercase 
.SS "#define BRLAPI_KEY_MAX   UINT64_C(0XFFFFFFFFFFFFFFFF)"
Brlapi_keyCode_t's biggest value
.PP
As defined in \fC<stdint\&.h>\fP 
.SS "#define BRLAPI_KEY_SYM_BACKSPACE   UINT64_C(0X0000FF08)"
Standard X keysyms 
.SS "#define BRLAPI_KEY_SYM_DELETE   UINT64_C(0X0000FFFF)"

.SS "#define BRLAPI_KEY_SYM_DOWN   UINT64_C(0X0000FF54)"

.SS "#define BRLAPI_KEY_SYM_END   UINT64_C(0X0000FF57)"

.SS "#define BRLAPI_KEY_SYM_ESCAPE   UINT64_C(0X0000FF1B)"

.SS "#define BRLAPI_KEY_SYM_FUNCTION   UINT64_C(0X0000FFBE)"

.SS "#define BRLAPI_KEY_SYM_HOME   UINT64_C(0X0000FF50)"

.SS "#define BRLAPI_KEY_SYM_INSERT   UINT64_C(0X0000FF63)"

.SS "#define BRLAPI_KEY_SYM_LEFT   UINT64_C(0X0000FF51)"

.SS "#define BRLAPI_KEY_SYM_LINEFEED   UINT64_C(0X0000FF0D)"

.SS "#define BRLAPI_KEY_SYM_PAGE_DOWN   UINT64_C(0X0000FF56)"

.SS "#define BRLAPI_KEY_SYM_PAGE_UP   UINT64_C(0X0000FF55)"

.SS "#define BRLAPI_KEY_SYM_RIGHT   UINT64_C(0X0000FF53)"

.SS "#define BRLAPI_KEY_SYM_TAB   UINT64_C(0X0000FF09)"

.SS "#define BRLAPI_KEY_SYM_UNICODE   UINT64_C(0X01000000)"

.SS "#define BRLAPI_KEY_SYM_UP   UINT64_C(0X0000FF52)"

.SS "#define BRLAPI_KEY_TYPE_CMD   UINT64_C(0X0000000020000000)"
Braille command brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_TYPE_MASK   UINT64_C(0X00000000E0000000)"
Mask for type of brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_TYPE_SHIFT   29"
Shift for type of brlapi_keyCode_t 
.SS "#define BRLAPI_KEY_TYPE_SYM   UINT64_C(0X0000000000000000)"
X Keysym brlapi_keyCode_t 
.SS "#define BRLAPI_PRIuKEYCODE   PRIu64"
Unsigned print format for brlapi_keyCode_t 
.SS "#define BRLAPI_PRIxKEYCODE   PRIx64"
Hex print format for brlapi_keyCode_t 
.SH "Typedef Documentation"
.PP 
.SS "typedef uint64_t \fBbrlapi_keyCode_t\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for BrlAPI from the source code\&.
