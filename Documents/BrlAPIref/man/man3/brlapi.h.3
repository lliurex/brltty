.TH "brlapi.h" 3 "Fri Feb 22 2019" "Version 0.7" "BrlAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
brlapi.h \- Types, defines and functions prototypes for \fIBrlAPI's\fP library\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <sys/types\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <inttypes\&.h>\fP
.br
\fC#include <wchar\&.h>\fP
.br
\fC#include 'brlapi_keycodes\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBbrlapi_connectionSettings_t\fP"
.br
.RI "Settings structure for \fIBrlAPI\fP connection\&. "
.ti -1c
.RI "struct \fBbrlapi_writeArguments_t\fP"
.br
.ti -1c
.RI "struct \fBbrlapi_expandedKeyCode_t\fP"
.br
.ti -1c
.RI "struct \fBbrlapi_describedKeyCode_t\fP"
.br
.ti -1c
.RI "struct \fBbrlapi_range_t\fP"
.br
.ti -1c
.RI "struct \fBbrlapi_error_t\fP"
.br
.ti -1c
.RI "struct \fBbrlapi_writeStruct\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBRLAPI_RELEASE\fP   '0\&.7\&.0'"
.br
.ti -1c
.RI "#define \fBBRLAPI_MAJOR\fP   0"
.br
.ti -1c
.RI "#define \fBBRLAPI_MINOR\fP   7"
.br
.ti -1c
.RI "#define \fBBRLAPI_REVISION\fP   0"
.br
.ti -1c
.RI "#define \fBBRLAPI_STDCALL\fP"
.br
.ti -1c
.RI "#define \fBBRLAPI_SOCKETPORTNUM\fP   4101"
.br
.ti -1c
.RI "#define \fBBRLAPI_SOCKETPORT\fP   '4101'"
.br
.ti -1c
.RI "#define \fBBRLAPI_SOCKETPATH\fP   '/var/lib/BrlAPI'"
.br
.ti -1c
.RI "#define \fBBRLAPI_ETCDIR\fP   '/etc'"
.br
.ti -1c
.RI "#define \fBBRLAPI_AUTHKEYFILE\fP   'brlapi\&.key'"
.br
.ti -1c
.RI "#define \fBBRLAPI_DEFAUTH_KEYFILE\fP   'keyfile:' BRLAPI_ETCDIR '/' \fBBRLAPI_AUTHKEYFILE\fP"
.br
.ti -1c
.RI "#define \fBBRLAPI_DEFAUTH_POLKIT\fP   ''"
.br
.ti -1c
.RI "#define \fBBRLAPI_DEFAUTH\fP   \fBBRLAPI_DEFAUTH_KEYFILE\fP \fBBRLAPI_DEFAUTH_POLKIT\fP"
.br
.ti -1c
.RI "#define \fBBRLAPI_SETTINGS_INITIALIZER\fP   { NULL, NULL }"
.br
.ti -1c
.RI "#define \fBBRLAPI_MAXNAMELENGTH\fP   31"
.br
.ti -1c
.RI "#define \fBBRLAPI_TTY_DEFAULT\fP   \-1"
.br
.ti -1c
.RI "#define \fBBRLAPI_DISPLAY_DEFAULT\fP   \-1"
.br
.ti -1c
.RI "#define \fBBRLAPI_CURSOR_LEAVE\fP   \-1"
.br
.ti -1c
.RI "#define \fBBRLAPI_CURSOR_OFF\fP   0"
.br
.ti -1c
.RI "#define \fBBRLAPI_WRITEARGUMENTS_INITIALIZER\fP"
.br
.ti -1c
.RI "#define \fBBRLAPI_UC_ROW\fP   0x2800UL"
.br
.ti -1c
.RI "#define \fBbrlapi_ignoreAllKeys\fP()   \fBbrlapi_ignoreKeys\fP(\fBbrlapi_rangeType_all\fP, NULL, 0)"
.br
.ti -1c
.RI "#define \fBbrlapi__ignoreAllKeys\fP(handle)   \fBbrlapi__ignoreKeys\fP(handle, \fBbrlapi_rangeType_all\fP, NULL, 0)"
.br
.ti -1c
.RI "#define \fBbrlapi_acceptAllKeys\fP()   \fBbrlapi_acceptKeys\fP(\fBbrlapi_rangeType_all\fP, NULL, 0)"
.br
.ti -1c
.RI "#define \fBbrlapi__acceptAllKeys\fP(handle)   \fBbrlapi__acceptKeys\fP(handle, \fBbrlapi_rangeType_all\fP, NULL, 0)"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_SUCCESS\fP   0"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_NOMEM\fP   1"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_TTYBUSY\fP   2"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_DEVICEBUSY\fP   3"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_UNKNOWN_INSTRUCTION\fP   4"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_ILLEGAL_INSTRUCTION\fP   5"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_INVALID_PARAMETER\fP   6"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_INVALID_PACKET\fP   7"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_CONNREFUSED\fP   8"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_OPNOTSUPP\fP   9"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_GAIERR\fP   10"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_LIBCERR\fP   11"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_UNKNOWNTTY\fP   12"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_PROTOCOL_VERSION\fP   13"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_EOF\fP   14"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_EMPTYKEY\fP   15"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_DRIVERERROR\fP   16"
.br
.ti -1c
.RI "#define \fBBRLAPI_ERROR_AUTHENTICATION\fP   17"
.br
.ti -1c
.RI "#define \fBbrlapi_error\fP   (*\fBbrlapi_error_location\fP())"
.br
.ti -1c
.RI "#define \fBbrlapi_errno\fP   (brlapi_error\&.brlerrno)"
.br
.ti -1c
.RI "#define \fBbrlapi_libcerrno\fP   (brlapi_error\&.libcerrno)"
.br
.ti -1c
.RI "#define \fBbrlapi_gaierrno\fP   (brlapi_error\&.gaierrno)"
.br
.ti -1c
.RI "#define \fBbrlapi_errfun\fP   (brlapi_error\&.errfun)"
.br
.ti -1c
.RI "#define \fBbrlapi_settings_t\fP   \fBbrlapi_connectionSettings_t\fP"
.br
.ti -1c
.RI "#define \fBBRLAPI_WRITESTRUCT_INITIALIZER\fP   \fBBRLAPI_WRITEARGUMENTS_INITIALIZER\fP"
.br
.ti -1c
.RI "#define \fBbrl_keycode_t\fP   \fBbrlapi_keyCode_t\fP"
.br
.ti -1c
.RI "#define \fBbrl_type_t\fP   \fBbrlapi_packetType_t\fP"
.br
.ti -1c
.RI "#define \fBBRLCOMMANDS\fP   NULL"
.br
.ti -1c
.RI "#define \fBBRL_KEYCODE_MAX\fP   \fBBRLAPI_KEY_MAX\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_initializeConnection\fP   \fBbrlapi_openConnection\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_getTty\fP   \fBbrlapi_enterTtyMode\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_getTtyPath\fP   \fBbrlapi_enterTtyModeWithPath\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_leaveTty\fP   \fBbrlapi_leaveTtyMode\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_unignoreKeyRange\fP   brlapi_acceptKeyRange"
.br
.ti -1c
.RI "#define \fBbrlapi_unignoreKeySet\fP   brlapi_acceptKeySet"
.br
.ti -1c
.RI "#define \fBbrlapi_getRaw\fP   \fBbrlapi_enterRawMode\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_leaveRaw\fP   \fBbrlapi_leaveRawMode\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_suspend\fP   \fBbrlapi_suspendDriver\fP"
.br
.ti -1c
.RI "#define \fBbrlapi_resume\fP   \fBbrlapi_resumeDriver\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_SUCCESS\fP   \fBBRLAPI_ERROR_SUCCESS\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_NOMEM\fP   \fBBRLAPI_ERROR_NOMEM\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_TTYBUSY\fP   \fBBRLAPI_ERROR_TTYBUSY\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_DEVICEBUSY\fP   \fBBRLAPI_ERROR_DEVICEBUSY\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_UNKNOWN_INSTRUCTION\fP   \fBBRLAPI_ERROR_UNKNOWN_INSTRUCTION\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_ILLEGAL_INSTRUCTION\fP   \fBBRLAPI_ERROR_ILLEGAL_INSTRUCTION\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_INVALID_PARAMETER\fP   \fBBRLAPI_ERROR_INVALID_PARAMETER\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_INVALID_PACKET\fP   \fBBRLAPI_ERROR_INVALID_PACKET\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_CONNREFUSED\fP   \fBBRLAPI_ERROR_CONNREFUSED\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_OPNOTSUPP\fP   \fBBRLAPI_ERROR_OPNOTSUPP\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_GAIERR\fP   \fBBRLAPI_ERROR_GAIERR\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_LIBCERR\fP   \fBBRLAPI_ERROR_LIBCERR\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_UNKNOWNTTY\fP   \fBBRLAPI_ERROR_UNKNOWNTTY\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_PROTOCOL_VERSION\fP   \fBBRLAPI_ERROR_PROTOCOL_VERSION\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_EOF\fP   \fBBRLAPI_ERROR_EOF\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_EMPTYKEY\fP   \fBBRLAPI_ERROR_EMPTYKEY\fP"
.br
.ti -1c
.RI "#define \fBBRLERR_DRIVERERROR\fP   \fBBRLAPI_ERROR_DRIVERERROR\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBbrlapi_handle_t\fP \fBbrlapi_handle_t\fP"
.br
.ti -1c
.RI "typedef int \fBbrlapi_fileDescriptor\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBbrlapi_packetType_t\fP"
.br
.ti -1c
.RI "typedef void(\fBBRLAPI_STDCALL\fP * \fBbrlapi_exceptionHandler_t\fP) (int error, \fBbrlapi_packetType_t\fP type, const void *packet, size_t size)"
.br
.ti -1c
.RI "typedef void(\fBBRLAPI_STDCALL\fP * \fBbrlapi__exceptionHandler_t\fP) (\fBbrlapi_handle_t\fP *handle, int error, \fBbrlapi_packetType_t\fP type, const void *packet, size_t size)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBbrlapi_rangeType_t\fP { \fBbrlapi_rangeType_all\fP, \fBbrlapi_rangeType_type\fP, \fBbrlapi_rangeType_command\fP, \fBbrlapi_rangeType_key\fP, \fBbrlapi_rangeType_code\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBbrlapi_getLibraryVersion\fP (int *major, int *minor, int *revision)"
.br
.ti -1c
.RI "size_t \fBBRLAPI_STDCALL\fP \fBbrlapi_getHandleSize\fP (void)"
.br
.ti -1c
.RI "\fBbrlapi_fileDescriptor\fP \fBBRLAPI_STDCALL\fP \fBbrlapi_openConnection\fP (const \fBbrlapi_connectionSettings_t\fP *desiredSettings, \fBbrlapi_connectionSettings_t\fP *actualSettings)"
.br
.ti -1c
.RI "\fBbrlapi_fileDescriptor\fP \fBBRLAPI_STDCALL\fP \fBbrlapi__openConnection\fP (\fBbrlapi_handle_t\fP *handle, const \fBbrlapi_connectionSettings_t\fP *desiredSettings, \fBbrlapi_connectionSettings_t\fP *actualSettings)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi_closeConnection\fP (void)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi__closeConnection\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi_setClientData\fP (void *data)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi__setClientData\fP (\fBbrlapi_handle_t\fP *handle, void *data)"
.br
.ti -1c
.RI "void *\fBBRLAPI_STDCALL\fP \fBbrlapi_getClientData\fP (void)"
.br
.ti -1c
.RI "void *\fBBRLAPI_STDCALL\fP \fBbrlapi__getClientData\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_getDriverName\fP (char *buffer, size_t size)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__getDriverName\fP (\fBbrlapi_handle_t\fP *handle, char *buffer, size_t size)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_getModelIdentifier\fP (char *buffer, size_t size)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__getModelIdentifier\fP (\fBbrlapi_handle_t\fP *handle, char *buffer, size_t size)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_getDisplaySize\fP (unsigned int *x, unsigned int *y)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__getDisplaySize\fP (\fBbrlapi_handle_t\fP *handle, unsigned int *x, unsigned int *y)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_enterTtyMode\fP (int tty, const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__enterTtyMode\fP (\fBbrlapi_handle_t\fP *handle, int tty, const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_enterTtyModeWithPath\fP (int *ttys, int count, const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__enterTtyModeWithPath\fP (\fBbrlapi_handle_t\fP *handle, int *ttys, int count, const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_leaveTtyMode\fP (void)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__leaveTtyMode\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_setFocus\fP (int tty)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__setFocus\fP (\fBbrlapi_handle_t\fP *handle, int tty)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_writeText\fP (int cursor, const char *text)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__writeText\fP (\fBbrlapi_handle_t\fP *handle, int cursor, const char *text)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_writeWText\fP (int cursor, const wchar_t *text)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__writeWText\fP (\fBbrlapi_handle_t\fP *handle, int cursor, const wchar_t *text)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_writeDots\fP (const unsigned char *dots)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__writeDots\fP (\fBbrlapi_handle_t\fP *handle, const unsigned char *dots)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_write\fP (const \fBbrlapi_writeArguments_t\fP *arguments)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__write\fP (\fBbrlapi_handle_t\fP *handle, const \fBbrlapi_writeArguments_t\fP *arguments)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_expandKeyCode\fP (\fBbrlapi_keyCode_t\fP code, \fBbrlapi_expandedKeyCode_t\fP *expansion)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_describeKeyCode\fP (\fBbrlapi_keyCode_t\fP code, \fBbrlapi_describedKeyCode_t\fP *description)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_readKey\fP (int wait, \fBbrlapi_keyCode_t\fP *code)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__readKey\fP (\fBbrlapi_handle_t\fP *handle, int wait, \fBbrlapi_keyCode_t\fP *code)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_readKeyWithTimeout\fP (int timeout_ms, \fBbrlapi_keyCode_t\fP *code)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__readKeyWithTimeout\fP (\fBbrlapi_handle_t\fP *handle, int timeout_ms, \fBbrlapi_keyCode_t\fP *code)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_ignoreKeys\fP (\fBbrlapi_rangeType_t\fP type, const \fBbrlapi_keyCode_t\fP keys[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__ignoreKeys\fP (\fBbrlapi_handle_t\fP *handle, \fBbrlapi_rangeType_t\fP type, const \fBbrlapi_keyCode_t\fP keys[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_acceptKeys\fP (\fBbrlapi_rangeType_t\fP type, const \fBbrlapi_keyCode_t\fP keys[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__acceptKeys\fP (\fBbrlapi_handle_t\fP *handle, \fBbrlapi_rangeType_t\fP type, const \fBbrlapi_keyCode_t\fP keys[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__ignoreAllKeys\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__acceptAllKeys\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_ignoreKeyRanges\fP (const \fBbrlapi_range_t\fP ranges[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__ignoreKeyRanges\fP (\fBbrlapi_handle_t\fP *handle, const \fBbrlapi_range_t\fP ranges[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_acceptKeyRanges\fP (const \fBbrlapi_range_t\fP ranges[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__acceptKeyRanges\fP (\fBbrlapi_handle_t\fP *handle, const \fBbrlapi_range_t\fP ranges[], unsigned int count)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_enterRawMode\fP (const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__enterRawMode\fP (\fBbrlapi_handle_t\fP *handle, const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_leaveRawMode\fP (void)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__leaveRawMode\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "ssize_t \fBBRLAPI_STDCALL\fP \fBbrlapi_sendRaw\fP (const void *buffer, size_t size)"
.br
.ti -1c
.RI "ssize_t \fBBRLAPI_STDCALL\fP \fBbrlapi__sendRaw\fP (\fBbrlapi_handle_t\fP *handle, const void *buffer, size_t size)"
.br
.ti -1c
.RI "ssize_t \fBBRLAPI_STDCALL\fP \fBbrlapi_recvRaw\fP (void *buffer, size_t size)"
.br
.ti -1c
.RI "ssize_t \fBBRLAPI_STDCALL\fP \fBbrlapi__recvRaw\fP (\fBbrlapi_handle_t\fP *handle, void *buffer, size_t size)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_suspendDriver\fP (const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__suspendDriver\fP (\fBbrlapi_handle_t\fP *handle, const char *driver)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_resumeDriver\fP (void)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__resumeDriver\fP (\fBbrlapi_handle_t\fP *handle)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi_perror\fP (const char *s)"
.br
.ti -1c
.RI "\fBbrlapi_error_t\fP *\fBBRLAPI_STDCALL\fP \fBbrlapi_error_location\fP (void)"
.br
.ti -1c
.RI "const char *\fBBRLAPI_STDCALL\fP \fBbrlapi_strerror\fP (const \fBbrlapi_error_t\fP *error)"
.br
.ti -1c
.RI "const char *\fBBRLAPI_STDCALL\fP \fBbrlapi_getPacketTypeName\fP (\fBbrlapi_packetType_t\fP type)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi_strexception\fP (char *buffer, size_t bufferSize, int error, \fBbrlapi_packetType_t\fP type, const void *packet, size_t packetSize)"
.br
.ti -1c
.RI "int \fBBRLAPI_STDCALL\fP \fBbrlapi__strexception\fP (\fBbrlapi_handle_t\fP *handle, char *buffer, size_t bufferSize, int error, \fBbrlapi_packetType_t\fP type, const void *packet, size_t packetSize)"
.br
.ti -1c
.RI "\fBbrlapi_exceptionHandler_t\fP \fBBRLAPI_STDCALL\fP \fBbrlapi_setExceptionHandler\fP (\fBbrlapi_exceptionHandler_t\fP handler)"
.br
.ti -1c
.RI "\fBbrlapi__exceptionHandler_t\fP \fBBRLAPI_STDCALL\fP \fBbrlapi__setExceptionHandler\fP (\fBbrlapi_handle_t\fP *handle, \fBbrlapi__exceptionHandler_t\fP handler)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi_defaultExceptionHandler\fP (int error, \fBbrlapi_packetType_t\fP type, const void *packet, size_t size)"
.br
.ti -1c
.RI "void \fBBRLAPI_STDCALL\fP \fBbrlapi__defaultExceptionHandler\fP (\fBbrlapi_handle_t\fP *handle, int error, \fBbrlapi_packetType_t\fP type, const void *packet, size_t size)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char * \fBbrlapi_errlist\fP []"
.br
.ti -1c
.RI "const int \fBbrlapi_nerr\fP"
.br
.ti -1c
.RI "\fBbrlapi_error_t\fP \fBbrlapi_error\fP"
.br
.ti -1c
.RI "int \fBbrlapi_errno\fP"
.br
.ti -1c
.RI "int \fBbrlapi_libcerrno\fP"
.br
.ti -1c
.RI "int \fBbrlapi_gaierrno\fP"
.br
.ti -1c
.RI "const char * \fBbrlapi_errfun\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BRLAPI_STDCALL"

.SH "Author"
.PP 
Generated automatically by Doxygen for BrlAPI from the source code\&.
